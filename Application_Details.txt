FrontEnd: Vuejs
Server: Nodejs, Expressjs, Apollo-Server
Middleware: Sequelize
Database: Postgresql



Key Components of App:
- Login & Signup Pages
- Home Page
	- User can assign himself to a project
	- Will see the project tasks
- Graphql Queries & Mutations
- Database Models using Sequelize



UI:
Sections in Home Page:
- Menu Section
- Main Section

Types of Projects and Tasks:
- All Projects
- Active Projects
- Completed Projects



Note:
For graphql - take code(types) first approach, not Schema First Approach

Kinds of User:
- Project Manager
- Project Lead
- Designer
- Frontend Engineer
- Backend Engineer
- Tester

Number of members per Project:
- Project Manager - 1 fix
- Project Lead - 1 fix
- Designer: min-1, max-2
- Frontend Engineer: min-1, max-2
- Backend Engineer: min-2, max-4
- Tester: min-1, max-2

Project Manager must handle atleast 2 projects
Project Lead must handle only 1 project

User can:
- Signup/Login to the App
- View his/her Profile
- View list of Projects he/she is assigned to
- View list of Tasks given to him in a Project
- View/Edit Status of each Task

Roles of each User:
- Project Manager
	- Can create a Project
	- Can close a Project once its completed
	- Can assign/remove Project Lead to/from a Project
- Project Lead
	- Can assign/remove Frontend-Developer/s, Backend-Developer/s & Tester/s to his/her Project
	- Can assign/remove Tasks to each member of the Project
	- Can request to Project Manager to add/remove him/her to/from a Project
- Other Users
	- Can request to add/remove him/her from any Project
	- Can request to assign any Task to him/her in a Project
	- Can request to remove any Task assigned to him/her
	- User have to raise requests to Project Lead



Advance Features:
- Create an Admin User
- Admin would be able to delete (logically) the users from the database
- Admin would be able to add a new user into the database




=======================================================================================

Database:
---------

TABLES & COLUMNS

- cts_user table
	- user_id string primary key unique not null
	- first_name string
	- last_name string
	- email string unique
	- password string
	- role_id string
	- created_dt date
	- created_by string
	- deleted_dt date
	- deleted_by string

- cts_user_type table
	- type_id string primary key unique not null
	- type_name string

- cts_user_role
	- role_id string primary key unique not null
	- role_name string
	- role_level string
	- type_id string

- cts_project table
	- project_id string primary key unique not null
	- release not null
	- title not null
	- description 
	- status - active, inactive
	- progress - not started, started, blocked, completed, archived
	- project_manager (user_id)
	- project_lead (user_id)
	- start_date dateonly
	- end_date dateonly
	- created_dt date not null
	- created_by string not null
	- deleted_dt date 
	- deleted_by string

- cts_assignment table
	- assignment_id int primary key auto increment unique not null
	- user_id not null
	- project_id not null
	- assigned_dt
	- assigned_by (user_id)
	- removed_dt
	- removed_by (user_id)

- cts_task table
	- task_id string primary key unique not null
	- title not null
	- description
	- status [active, inactive]
	- progress [not started, started, in review, blocked, completed, archived]
	- priority [severe, high, medium, low] not null
	- story_points [1-5 based om the time required] not null
	- start_date dateonly
	- end_date dateonly
	- user_id 
	- project_id 
	- assigned_dt
	- assigned_by (user_id)
	- removed_dt
	- removed_by (user_id)
	- created_dt date not null
	- created_by string not null
	- deleted_dt date
	- deleted_by string

- cts_authentication (Not Required)
	- token string primary key unique not null
	- user_id string not null
	- status string not null
	- created_dt date not null
	- deleted_dt date 


Relationship between Tables:
- cts_user belongsToMany cts_project through cts_assignment
- cts_project belongsToMany cts_user through cts_assignment
- cts_user hasMany cts_task
- cts_project hasMany cts_task
- cts_user hasMany cts_assignment (to fetch the cts_assignment compelete details)
- cts_project hasMany cts_assignment (to fetch the cts_assignment compelete details)
- cts_authentication must be isolated


User_Types for User_Roles:
- Admin - Administrator
- Leadership - Project Manager, Project Lead
- Standard - Designer, Developer, Tester, Validator, Support

User_Roles: 
- Administrator, Project Manager, Project Lead, Designer, Developer, Tester, Validator, Support


Extra Data needs to be added:
- cts_user - skills, 
- cts_project - design_deadline, development_deadline, testing_deadline, go_live_date, 
- cts_skills - Create a new table for the skills with categories


Process of Communication between Client and Server: 
- User will login via email and password
- Server will send a valid Token and save it in the database
- Client will send request to the GraphQL APIs and Token must be sent along with each request
- For each request Server will receive the Token and Verify if its valid or not
- If the Token is verified then the Server will check the Authorizarion of the User
- Based on the Authorizarion of the User, the Server will allow the operations for the API request


Steps for Token Verification: 
- At the time of Login, Server will generate the Token and store it in the Database along with the UserId and Status of the Token.
- After that, whenever Client will send any API request, Server will check the Token in the request
- If its there then only it will proceed further and Validate it by checking it in the Database

Status of Token: 
- Active - If the User is logged in with proper credentials
- Expired - If the Token is expired based on the token's expire time
- Deleted - If the User Logs out of the Application

Things to remember about Token Authentication:
- Token must always be unique (even in database)
- There should always be a User associated with each Token
- Token must always have a status
- There should be exactly one Active Token associated with any User




=========================================================================================

Phase 1:
--------

Started: 29/03/2024
Completed: 06/05/2024

Backend:
- Create an apollo server using nodejs/expressjs
- Create Graphql Schema
	- Use Code First Approach
	- Pass the Schema to ApolloServer instead of typedefs and resolvers
- Create Models for all the tables
- Using the sequelize models, create tables in the database
- Add the dummy data into the tables using DataFiles
- Create Graphql queries, mutations, types and resolvers for the tables (only required ones)

Frontend:
- Create Login and Signup Pages
- Add complete functionality for signing up the user and logging it into the App
- Create a Home page with basic structure and with minimal data
	- Profile of the User 
	- All the Projects & Tasks




=========================================================================================

Phase 2:
--------

Started: 06/05/2024
Completed: 

Backend:
- Add the following for the Logged in User:
	- Validation of the User Credentials
	- Proper Token Generation & Validation
- Create a new table 'cts_authentication' in the database for the User Authentication using Token
- Create Graphql Mutations for Create, Update and Delete of the Projects & Tasks
- Add Data Validation for adding and updating the Projects & Tasks
- Validate the Mutation reolvers for the User Role of the Logged-in User
- Rename the files i.e. remove the 'cts' from all the file names

FrontEnd:
- Remove the Signup functionality i.e. Signup Page (User will be added by the Admin)
- Make Changes in the Login Page:
	- Remove the Header and Background
	- Add the Company Logo on top of the Form
	- Keep the Login Form in between the Page (i.e. A better UI for Login Form)
- Add all the Types of Projects and Tasks in Menu Section
- Create a Better UI for the list of Projects and Tasks
- Display only the User-related Projects and Tasks (Not all of them)
- Add the following functionalities as per the User Roles:
	- User can Create, Update and Delete the Projects & Tasks
	- User can Assign/Remove the Projects & Tasks to other User/s
	- User can request to join/leave Projects & Tasks
- Make the Profile Page better
- Create a Store in Vue for handling the Data moving through the Application

